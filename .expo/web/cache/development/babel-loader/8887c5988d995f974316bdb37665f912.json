{"ast":null,"code":"import _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport { NetworkStateType } from \"./Network.types\";\nexport default {\n  getIpAddressAsync: function () {\n    var _getIpAddressAsync = _asyncToGenerator(function* () {\n      try {\n        var resp = yield fetch('https://api.ipify.org?format=json');\n        var data = yield resp.json();\n        return data.ip;\n      } catch (e) {\n        throw e;\n      }\n    });\n\n    function getIpAddressAsync() {\n      return _getIpAddressAsync.apply(this, arguments);\n    }\n\n    return getIpAddressAsync;\n  }(),\n  getNetworkStateAsync: function () {\n    var _getNetworkStateAsync = _asyncToGenerator(function* () {\n      var type = navigator.onLine ? NetworkStateType.UNKNOWN : NetworkStateType.NONE;\n      var isConnected = navigator.onLine;\n      var isInternetReachable = isConnected;\n      return {\n        type: type,\n        isConnected: isConnected,\n        isInternetReachable: isInternetReachable\n      };\n    });\n\n    function getNetworkStateAsync() {\n      return _getNetworkStateAsync.apply(this, arguments);\n    }\n\n    return getNetworkStateAsync;\n  }(),\n  getMacAddressAsync: function () {\n    var _getMacAddressAsync = _asyncToGenerator(function* () {\n      return null;\n    });\n\n    function getMacAddressAsync() {\n      return _getMacAddressAsync.apply(this, arguments);\n    }\n\n    return getMacAddressAsync;\n  }()\n};","map":{"version":3,"mappings":";AAAA,SAAuBA,gBAAvB;AAEA,eAAe;EACPC,iBADO;IAAA,wDACU;MACrB,IAAI;QACF,IAAMC,IAAI,SAASC,KAAK,CAAC,mCAAD,CAAxB;QACA,IAAMC,IAAI,SAASF,IAAI,CAACG,IAAL,EAAnB;QACA,OAAOD,IAAI,CAACE,EAAZ;MACD,CAJD,CAIE,OAAOC,CAAP,EAAU;QACV,MAAMA,CAAN;MACD;IACF,CATY;;IAAA;MAAA;IAAA;;IAAA;EAAA;EAUPC,oBAVO;IAAA,2DAUa;MACxB,IAAMC,IAAI,GAAGC,SAAS,CAACC,MAAV,GAAmBX,gBAAgB,CAACY,OAApC,GAA8CZ,gBAAgB,CAACa,IAA5E;MACA,IAAMC,WAAW,GAAGJ,SAAS,CAACC,MAA9B;MACA,IAAMI,mBAAmB,GAAGD,WAA5B;MACA,OAAO;QACLL,IAAI,EAAJA,IADK;QAELK,WAAW,EAAXA,WAFK;QAGLC,mBAAmB,EAAnBA;MAHK,CAAP;IAKD,CAnBY;;IAAA;MAAA;IAAA;;IAAA;EAAA;EAoBPC,kBApBO;IAAA,yDAoBW;MACtB,OAAO,IAAP;IACD,CAtBY;;IAAA;MAAA;IAAA;;IAAA;EAAA;AAAA,CAAf","names":["NetworkStateType","getIpAddressAsync","resp","fetch","data","json","ip","e","getNetworkStateAsync","type","navigator","onLine","UNKNOWN","NONE","isConnected","isInternetReachable","getMacAddressAsync"],"sourceRoot":"","sources":["../src/ExpoNetwork.web.ts"],"sourcesContent":["import { NetworkState, NetworkStateType } from './Network.types';\n\nexport default {\n  async getIpAddressAsync(): Promise<string> {\n    try {\n      const resp = await fetch('https://api.ipify.org?format=json');\n      const data = await resp.json();\n      return data.ip;\n    } catch (e) {\n      throw e;\n    }\n  },\n  async getNetworkStateAsync(): Promise<NetworkState> {\n    const type = navigator.onLine ? NetworkStateType.UNKNOWN : NetworkStateType.NONE;\n    const isConnected = navigator.onLine;\n    const isInternetReachable = isConnected;\n    return {\n      type,\n      isConnected,\n      isInternetReachable,\n    };\n  },\n  async getMacAddressAsync(): Promise<null> {\n    return null;\n  },\n};\n"]},"metadata":{},"sourceType":"module"}