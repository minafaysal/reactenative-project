{"ast":null,"code":"import _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport { EventEmitter, UnavailabilityError } from 'expo-modules-core';\nimport { useEffect } from 'react';\nimport ExpoScreenCapture from \"./ExpoScreenCapture\";\nvar activeTags = new Set();\nvar emitter = new EventEmitter(ExpoScreenCapture);\nvar onScreenshotEventName = 'onScreenshot';\nexport function isAvailableAsync() {\n  return _isAvailableAsync.apply(this, arguments);\n}\n\nfunction _isAvailableAsync() {\n  _isAvailableAsync = _asyncToGenerator(function* () {\n    return !!ExpoScreenCapture.preventScreenCapture && !!ExpoScreenCapture.allowScreenCapture;\n  });\n  return _isAvailableAsync.apply(this, arguments);\n}\n\nexport function preventScreenCaptureAsync() {\n  return _preventScreenCaptureAsync.apply(this, arguments);\n}\n\nfunction _preventScreenCaptureAsync() {\n  _preventScreenCaptureAsync = _asyncToGenerator(function* () {\n    var key = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'default';\n\n    if (!ExpoScreenCapture.preventScreenCapture) {\n      throw new UnavailabilityError('ScreenCapture', 'preventScreenCaptureAsync');\n    }\n\n    if (!activeTags.has(key)) {\n      activeTags.add(key);\n      yield ExpoScreenCapture.preventScreenCapture();\n    }\n  });\n  return _preventScreenCaptureAsync.apply(this, arguments);\n}\n\nexport function allowScreenCaptureAsync() {\n  return _allowScreenCaptureAsync.apply(this, arguments);\n}\n\nfunction _allowScreenCaptureAsync() {\n  _allowScreenCaptureAsync = _asyncToGenerator(function* () {\n    var key = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'default';\n\n    if (!ExpoScreenCapture.preventScreenCapture) {\n      throw new UnavailabilityError('ScreenCapture', 'allowScreenCaptureAsync');\n    }\n\n    activeTags.delete(key);\n\n    if (activeTags.size === 0) {\n      yield ExpoScreenCapture.allowScreenCapture();\n    }\n  });\n  return _allowScreenCaptureAsync.apply(this, arguments);\n}\n\nexport function usePreventScreenCapture() {\n  var key = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'default';\n  useEffect(function () {\n    preventScreenCaptureAsync(key);\n    return function () {\n      allowScreenCaptureAsync(key);\n    };\n  }, [key]);\n}\nexport function addScreenshotListener(listener) {\n  return emitter.addListener(onScreenshotEventName, listener);\n}\nexport function removeScreenshotListener(subscription) {\n  emitter.removeSubscription(subscription);\n}","map":{"version":3,"mappings":";AAAA,SAASA,YAAT,EAAqCC,mBAArC,QAAgE,mBAAhE;AACA,SAASC,SAAT,QAA0B,OAA1B;AAEA,OAAOC,iBAAP;AAEA,IAAMC,UAAU,GAAgB,IAAIC,GAAJ,EAAhC;AACA,IAAMC,OAAO,GAAG,IAAIN,YAAJ,CAAiBG,iBAAjB,CAAhB;AAEA,IAAMI,qBAAqB,GAAG,cAA9B;AASA,gBAAsBC,gBAAtB;EAAA;AAAA;;;wCAAO,aAA+B;IACpC,OAAO,CAAC,CAACL,iBAAiB,CAACM,oBAApB,IAA4C,CAAC,CAACN,iBAAiB,CAACO,kBAAvE;EACD,C;;;;AAeD,gBAAsBC,yBAAtB;EAAA;AAAA;;;iDAAO,aAAgE;IAAA,IAAvBC,GAAuB,uEAAT,SAAS;;IACrE,IAAI,CAACT,iBAAiB,CAACM,oBAAvB,EAA6C;MAC3C,MAAM,IAAIR,mBAAJ,CAAwB,eAAxB,EAAyC,2BAAzC,CAAN;IACD;;IAED,IAAI,CAACG,UAAU,CAACS,GAAX,CAAeD,GAAf,CAAL,EAA0B;MACxBR,UAAU,CAACU,GAAX,CAAeF,GAAf;MACA,MAAMT,iBAAiB,CAACM,oBAAlB,EAAN;IACD;EACF,C;;;;AAYD,gBAAsBM,uBAAtB;EAAA;AAAA;;;+CAAO,aAA8D;IAAA,IAAvBH,GAAuB,uEAAT,SAAS;;IACnE,IAAI,CAACT,iBAAiB,CAACM,oBAAvB,EAA6C;MAC3C,MAAM,IAAIR,mBAAJ,CAAwB,eAAxB,EAAyC,yBAAzC,CAAN;IACD;;IAEDG,UAAU,CAACY,MAAX,CAAkBJ,GAAlB;;IACA,IAAIR,UAAU,CAACa,IAAX,KAAoB,CAAxB,EAA2B;MACzB,MAAMd,iBAAiB,CAACO,kBAAlB,EAAN;IACD;EACF,C;;;;AAWD,OAAM,SAAUQ,uBAAV,GAAyD;EAAA,IAAvBN,GAAuB,uEAAT,SAAS;EAC7DV,SAAS,CAAC,YAAK;IACbS,yBAAyB,CAACC,GAAD,CAAzB;IAEA,OAAO,YAAK;MACVG,uBAAuB,CAACH,GAAD,CAAvB;IACD,CAFD;EAGD,CANQ,EAMN,CAACA,GAAD,CANM,CAAT;AAOD;AAcD,OAAM,SAAUO,qBAAV,CAAgCC,QAAhC,EAAoD;EACxD,OAAOd,OAAO,CAACe,WAAR,CAA0Bd,qBAA1B,EAAiDa,QAAjD,CAAP;AACD;AAoBD,OAAM,SAAUE,wBAAV,CAAmCC,YAAnC,EAA6D;EACjEjB,OAAO,CAACkB,kBAAR,CAA2BD,YAA3B;AACD","names":["EventEmitter","UnavailabilityError","useEffect","ExpoScreenCapture","activeTags","Set","emitter","onScreenshotEventName","isAvailableAsync","preventScreenCapture","allowScreenCapture","preventScreenCaptureAsync","key","has","add","allowScreenCaptureAsync","delete","size","usePreventScreenCapture","addScreenshotListener","listener","addListener","removeScreenshotListener","subscription","removeSubscription"],"sourceRoot":"","sources":["../src/ScreenCapture.ts"],"sourcesContent":["import { EventEmitter, Subscription, UnavailabilityError } from 'expo-modules-core';\nimport { useEffect } from 'react';\n\nimport ExpoScreenCapture from './ExpoScreenCapture';\n\nconst activeTags: Set<string> = new Set();\nconst emitter = new EventEmitter(ExpoScreenCapture);\n\nconst onScreenshotEventName = 'onScreenshot';\n\n// @needsAudit\n/**\n * Returns whether the Screen Capture API is available on the current device.\n *\n * @returns A promise that resolves to a `boolean` indicating whether the Screen Capture API is available on the current\n * device. Currently, this resolves to `true` on Android and iOS only.\n */\nexport async function isAvailableAsync(): Promise<boolean> {\n  return !!ExpoScreenCapture.preventScreenCapture && !!ExpoScreenCapture.allowScreenCapture;\n}\n\n// @needsAudit\n/**\n * Prevents screenshots and screen recordings until `allowScreenCaptureAsync` is called or the app is restarted. If you are\n * already preventing screen capture, this method does nothing (unless you pass a new and unique `key`).\n *\n * > Please note that on iOS, this will only prevent screen recordings, and is only available on\n * iOS 11 and newer. On older iOS versions, this method does nothing.\n *\n * @param key Optional. If provided, this will help prevent multiple instances of the `preventScreenCaptureAsync`\n * and `allowScreenCaptureAsync` methods (and `usePreventScreenCapture` hook) from conflicting with each other.\n * When using multiple keys, you'll have to re-allow each one in order to re-enable screen capturing.\n * Defaults to `'default'`.\n */\nexport async function preventScreenCaptureAsync(key: string = 'default'): Promise<void> {\n  if (!ExpoScreenCapture.preventScreenCapture) {\n    throw new UnavailabilityError('ScreenCapture', 'preventScreenCaptureAsync');\n  }\n\n  if (!activeTags.has(key)) {\n    activeTags.add(key);\n    await ExpoScreenCapture.preventScreenCapture();\n  }\n}\n\n// @needsAudit\n/**\n * Re-allows the user to screen record or screenshot your app. If you haven't called\n * `preventScreenCapture()` yet, this method does nothing.\n *\n * @param key This will prevent multiple instances of the `preventScreenCaptureAsync` and\n * `allowScreenCaptureAsync` methods from conflicting with each other. If provided, the value must\n * be the same as the key passed to `preventScreenCaptureAsync` in order to re-enable screen\n * capturing. Defaults to 'default'.\n */\nexport async function allowScreenCaptureAsync(key: string = 'default'): Promise<void> {\n  if (!ExpoScreenCapture.preventScreenCapture) {\n    throw new UnavailabilityError('ScreenCapture', 'allowScreenCaptureAsync');\n  }\n\n  activeTags.delete(key);\n  if (activeTags.size === 0) {\n    await ExpoScreenCapture.allowScreenCapture();\n  }\n}\n\n// @needsAudit\n/**\n * A React hook to prevent screen capturing for as long as the owner component is mounted.\n *\n * @param key. If provided, this will prevent multiple instances of this hook or the\n * `preventScreenCaptureAsync` and `allowScreenCaptureAsync` methods from conflicting with each other.\n * This argument is useful if you have multiple active components using the `allowScreenCaptureAsync`\n * hook. Defaults to `'default'`.\n */\nexport function usePreventScreenCapture(key: string = 'default'): void {\n  useEffect(() => {\n    preventScreenCaptureAsync(key);\n\n    return () => {\n      allowScreenCaptureAsync(key);\n    };\n  }, [key]);\n}\n\n// @needsAudit\n/**\n * Adds a listener that will fire whenever the user takes a screenshot while the app is foregrounded.\n * On Android, this method requires the `READ_EXTERNAL_STORAGE` permission. You can request this\n * with [`MediaLibrary.requestPermissionsAsync()`](./media-library/#medialibraryrequestpermissionsasync).\n *\n * @param listener The function that will be executed when the user takes a screenshot.\n * This function accepts no arguments.\n *\n * @return A `Subscription` object that you can use to unregister the listener, either by calling\n * `remove()` or passing it to `removeScreenshotListener`.\n */\nexport function addScreenshotListener(listener: () => void): Subscription {\n  return emitter.addListener<void>(onScreenshotEventName, listener);\n}\n\n// @needsAudit\n/**\n * Removes the subscription you provide, so that you are no longer listening for screenshots.\n *\n * If you prefer, you can also call `remove()` on that `Subscription` object, for example:\n *\n * ```ts\n * let mySubscription = addScreenshotListener(() => {\n *   console.log(\"You took a screenshot!\");\n * });\n * ...\n * mySubscription.remove();\n * // OR\n * removeScreenshotListener(mySubscription);\n * ```\n *\n * @param subscription Subscription returned by `addScreenshotListener`.\n */\nexport function removeScreenshotListener(subscription: Subscription) {\n  emitter.removeSubscription(subscription);\n}\n\nexport { Subscription };\n"]},"metadata":{},"sourceType":"module"}