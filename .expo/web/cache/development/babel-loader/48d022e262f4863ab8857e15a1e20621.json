{"ast":null,"code":"import _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport { UnavailabilityError } from 'expo-modules-core';\nimport ExpoNetwork from \"./ExpoNetwork\";\nimport { NetworkStateType } from \"./Network.types\";\nexport { NetworkStateType };\nexport function getNetworkStateAsync() {\n  return _getNetworkStateAsync.apply(this, arguments);\n}\n\nfunction _getNetworkStateAsync() {\n  _getNetworkStateAsync = _asyncToGenerator(function* () {\n    if (!ExpoNetwork.getNetworkStateAsync) {\n      throw new UnavailabilityError('expo-network', 'getNetworkStateAsync');\n    }\n\n    return yield ExpoNetwork.getNetworkStateAsync();\n  });\n  return _getNetworkStateAsync.apply(this, arguments);\n}\n\nexport function getIpAddressAsync() {\n  return _getIpAddressAsync.apply(this, arguments);\n}\n\nfunction _getIpAddressAsync() {\n  _getIpAddressAsync = _asyncToGenerator(function* () {\n    if (!ExpoNetwork.getIpAddressAsync) {\n      throw new UnavailabilityError('expo-network', 'getIpAddressAsync');\n    }\n\n    return yield ExpoNetwork.getIpAddressAsync();\n  });\n  return _getIpAddressAsync.apply(this, arguments);\n}\n\nexport function getMacAddressAsync() {\n  return _getMacAddressAsync.apply(this, arguments);\n}\n\nfunction _getMacAddressAsync() {\n  _getMacAddressAsync = _asyncToGenerator(function* () {\n    var interfaceName = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n    console.warn('Network.getMacAddressAsync has been deprecated and will be removed in a future SDK version. To uniquely identify a device, use the expo-application module instead.');\n    return '02:00:00:00:00:00';\n  });\n  return _getMacAddressAsync.apply(this, arguments);\n}\n\nexport function isAirplaneModeEnabledAsync() {\n  return _isAirplaneModeEnabledAsync.apply(this, arguments);\n}\n\nfunction _isAirplaneModeEnabledAsync() {\n  _isAirplaneModeEnabledAsync = _asyncToGenerator(function* () {\n    if (!ExpoNetwork.isAirplaneModeEnabledAsync) {\n      throw new UnavailabilityError('expo-network', 'isAirplaneModeEnabledAsync');\n    }\n\n    return yield ExpoNetwork.isAirplaneModeEnabledAsync();\n  });\n  return _isAirplaneModeEnabledAsync.apply(this, arguments);\n}","map":{"version":3,"mappings":";AAAA,SAASA,mBAAT,QAAoC,mBAApC;AAEA,OAAOC,WAAP;AACA,SAAuBC,gBAAvB;AAEA,SAAuBA,gBAAvB;AAqBA,gBAAsBC,oBAAtB;EAAA;AAAA;;;4CAAO,aAAmC;IACxC,IAAI,CAACF,WAAW,CAACE,oBAAjB,EAAuC;MACrC,MAAM,IAAIH,mBAAJ,CAAwB,cAAxB,EAAwC,sBAAxC,CAAN;IACD;;IACD,aAAaC,WAAW,CAACE,oBAAZ,EAAb;EACD,C;;;;AAiBD,gBAAsBC,iBAAtB;EAAA;AAAA;;;yCAAO,aAAgC;IACrC,IAAI,CAACH,WAAW,CAACG,iBAAjB,EAAoC;MAClC,MAAM,IAAIJ,mBAAJ,CAAwB,cAAxB,EAAwC,mBAAxC,CAAN;IACD;;IACD,aAAaC,WAAW,CAACG,iBAAZ,EAAb;EACD,C;;;;AAoBD,gBAAsBC,kBAAtB;EAAA;AAAA;;;0CAAO,aAAqE;IAAA,IAAnCC,aAAmC,uEAAJ,IAAI;IAC1EC,OAAO,CAACC,IAAR,CACE,qKADF;IAGA,OAAO,mBAAP;EACD,C;;;;AAeD,gBAAsBC,0BAAtB;EAAA;AAAA;;;kDAAO,aAAyC;IAC9C,IAAI,CAACR,WAAW,CAACQ,0BAAjB,EAA6C;MAC3C,MAAM,IAAIT,mBAAJ,CAAwB,cAAxB,EAAwC,4BAAxC,CAAN;IACD;;IACD,aAAaC,WAAW,CAACQ,0BAAZ,EAAb;EACD,C","names":["UnavailabilityError","ExpoNetwork","NetworkStateType","getNetworkStateAsync","getIpAddressAsync","getMacAddressAsync","interfaceName","console","warn","isAirplaneModeEnabledAsync"],"sourceRoot":"","sources":["../src/Network.ts"],"sourcesContent":["import { UnavailabilityError } from 'expo-modules-core';\n\nimport ExpoNetwork from './ExpoNetwork';\nimport { NetworkState, NetworkStateType } from './Network.types';\n\nexport { NetworkState, NetworkStateType };\n\n// @needsAudit\n/**\n * Gets the device's current network connection state.\n *\n * On web, `navigator.connection.type` is not available on browsers. So if there is an active\n * network connection, the field `type` returns `NetworkStateType.UNKNOWN`. Otherwise, it returns\n * `NetworkStateType.NONE`.\n * @return A `Promise` that fulfils with a `NetworkState` object.\n *\n * @example\n * ```ts\n * await Network.getNetworkStateAsync();\n * // {\n * //   type: NetworkStateType.CELLULAR,\n * //   isConnected: true,\n * //   isInternetReachable: true,\n * // }\n * ```\n */\nexport async function getNetworkStateAsync(): Promise<NetworkState> {\n  if (!ExpoNetwork.getNetworkStateAsync) {\n    throw new UnavailabilityError('expo-network', 'getNetworkStateAsync');\n  }\n  return await ExpoNetwork.getNetworkStateAsync();\n}\n\n// @needsAudit\n/**\n * Gets the device's current IPv4 address. Returns `0.0.0.0` if the IP address could not be retrieved.\n *\n * On web, this method uses the third-party [`ipify service`](https://www.ipify.org/) to get the\n * public IP address of the current device.\n * @return A `Promise` that fulfils with a `string` of the current IP address of the device's main\n * network interface. Can only be IPv4 address.\n *\n * @example\n * ```ts\n * await Network.getIpAddressAsync();\n * // \"92.168.32.44\"\n * ```\n */\nexport async function getIpAddressAsync(): Promise<string> {\n  if (!ExpoNetwork.getIpAddressAsync) {\n    throw new UnavailabilityError('expo-network', 'getIpAddressAsync');\n  }\n  return await ExpoNetwork.getIpAddressAsync();\n}\n\n// @needsAudit\n/**\n * Gets the specified network interface's MAC address.\n *\n * > Beginning with iOS 7 and Android 11, non-system applications can no longer access the device's\n * MAC address. In SDK 41 and above, this method will always resolve to a predefined value that\n * isn't useful.\n *\n * If you need to identify the device, use the `getIosIdForVendorAsync()` method / `androidId`\n * property of the `expo-application` unimodule instead.\n *\n * @deprecated This method is deprecated and will be removed in a future SDK version.\n *\n * @param interfaceName A string representing interface name (`eth0`, `wlan0`) or `null` (default),\n * meaning the method should fetch the MAC address of the first available interface.\n *\n * @return A `Promise` that fulfils with the value `'02:00:00:00:00:00'`.\n */\nexport async function getMacAddressAsync(interfaceName: string | null = null): Promise<string> {\n  console.warn(\n    'Network.getMacAddressAsync has been deprecated and will be removed in a future SDK version. To uniquely identify a device, use the expo-application module instead.'\n  );\n  return '02:00:00:00:00:00';\n}\n\n// @needsAudit\n/**\n * Tells if the device is in airplane mode.\n * @return Returns a `Promise` that fulfils with a `boolean` value for whether the device is in\n * airplane mode or not.\n * @platform android\n *\n * @example\n * ```ts\n * await Network.isAirplaneModeEnabledAsync();\n * // false\n * ```\n */\nexport async function isAirplaneModeEnabledAsync(): Promise<boolean> {\n  if (!ExpoNetwork.isAirplaneModeEnabledAsync) {\n    throw new UnavailabilityError('expo-network', 'isAirplaneModeEnabledAsync');\n  }\n  return await ExpoNetwork.isAirplaneModeEnabledAsync();\n}\n"]},"metadata":{},"sourceType":"module"}